M = cor(sapply(df, as.numeric), use = 'pairwise.complete.obs', method = 'spearman')
p = ggcorrplot::ggcorrplot(M, outline.color = 'white', ggtheme = ggplot2::theme_bw,
colors = c("#4dbd05", "white", "#9b45a3"),
legend.title = 'Spearman correlation',
title = 'Spearman correlation',
tl.cex = 7) +
geom_rect(aes(xmin=22.5, xmax=32.5, ymin=0.5, ymax=22.5), color = 'black', fill = NA, linetype = 'dashed', linewidth = 0.6)
ggplotly(p)
write.csv(M, '240607_Sundar_miRNA_files/spearman_correlation.csv')
ggsave('240607_Sundar_miRNA_files/figure-html/corplot.png', p, width = 8, height = 6, dpi = 'print')
ggplotly(p)
# Kruskal-Wallis
k_FEV = kruskal.test(preFEV1_Quanpct_pred ~ severity2, dat)
k_FEV
library(rstatix)
install.packages('rstatix')
library(rstatix)
dunn_test(dat, preFEV1_Quanpct_pred ~ severity2)
dunn_test(dat, preFEV1_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_FEV1FVC = kruskal.test(preFEV1FVC_Quanpct_pred ~ severity2, dat)
k_FEV1FVC
dunn_test(dat, preFEV1FVC_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_FVC = kruskal.test(preFVC_Quanpct_pred ~ severity2, dat)
k_FVC
dunn_test(dat, preFVC_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_IGE = kruskal.test(`IgE (kU/L)` ~ severity2, dat)
k_IGE
dunn_test(dat, `IgE (kU/L)` ~ severity2) %>% kable()
# Kruskal-Wallis
k_bEOS = kruskal.test(as.integer(`Blood_EOS %`) ~ severity2, dat)
k_bEOS
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
dunn_test(dat, as.integer(`Blood_EOS %`) ~ severity2) %>% kable()
dat$`Blood_EOS %` = as.integer(dat$`Blood_EOS %`)
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
# Kruskal-Wallis
k_sEOS = kruskal.test(as.integer(`sputum_EOS %`) ~ severity2, dat)
k_sEOS
dat$`sputum_EOS %` = as.integer(`sputum_EOS %`)
dat$`sputum_EOS %` = as.integer(dat$`sputum_EOS %`)
dunn_test(dat, `IgE (kU/L)` ~ severity2) %>% kable()
dunn_test(dat, `sputum_EOS %` ~ severity2) %>% kable()
# ANOVA
# Kruskal-Wallis
k_FENO = kruskal.test(as.integer(`FeNO (ppb)`) ~ severity2, dat)
k_FENO
# Kruskal-Wallis
k_FENOlog = kruskal.test(as.integer(feno_log) ~ severity2, dat)
k_FENOlog
# Kruskal-Wallis
k_exac = kruskal.test(as.integer(`WG_derived_num_exacacerbations (12 mo.)`) ~ severity2, dat)
k_exac
# Kruskal-Wallis
k_act = kruskal.test(as.integer(act_score) ~ severity2, dat)
k_act
# Kruskal-Wallis
k_NC = kruskal.test(as.integer(num_controllers) ~ severity2, dat)
k_NC
dat$num_controllers = as.integer(dat$num_controllers)
dunn_test(dat, num_controllers ~ severity2) %>% kable()
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_bEOS = signif(mean(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
sd_bEOS = signif(sd(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
med_bEOS = signif(median(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
min_bEOS = signif(min(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
max_bEOS = signif(max(as.integer(`Blood_EOS %`, na.rm = TRUE)),3)) %>%
kable()
# boxplot
p=ggplot(dat, aes(severity2, as.integer(`Blood_EOS %`))) +
geom_boxplot() +
ggtitle('Blood Eos %') +
xlab('Severity') + ylab('Blood EoS%') +
theme_bw()
ggplotly(p)
ggsave('240607_Sundar_miRNA_files/figure-html/bEOS_boxplot.png', p, width = 8, height = 6, dpi = 'print')
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`),3),
sd_sEOS = signif(sd(`Blood_EOS %`),3),
med_sEOS = signif(median(`Blood_EOS %`),3),
min_sEOS = signif(min(`Blood_EOS %`),3),
max_sEOS = signif(max(`Blood_EOS %`),3)) %>%
kable()
dat %>%
group_by(severity2)
View(dat)
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_sEOS = signif(sd(`Blood_EOS %`),3),
med_sEOS = signif(median(`Blood_EOS %`),3),
min_sEOS = signif(min(`Blood_EOS %`),3),
max_sEOS = signif(max(`Blood_EOS %`),3)) %>%
kable()
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_sEOS = signif(sd(`Blood_EOS %`, na.rm = TRUE),3),
med_sEOS = signif(median(`Blood_EOS %`, na.rm = TRUE),3),
min_sEOS = signif(min(`Blood_EOS %`, na.rm = TRUE),3),
max_sEOS = signif(max(`Blood_EOS %`, na.rm = TRUE),3)) %>%
kable()
dat$`Blood_EOS %` = as.integer(dat$`Blood_EOS %`)
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_bEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_bEOS = signif(sd(`Blood_EOS %`, na.rm = TRUE),3),
med_bEOS = signif(median(`Blood_EOS %`, na.rm = TRUE),3),
min_bEOS = signif(min(`Blood_EOS %`, na.rm = TRUE),3),
max_bEOS = signif(max(`Blood_EOS %`, na.rm = TRUE),3)) %>%
kable()
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
dunn_test(dat, `Blood_EOS %` ~ severity2)[,2:7] %>% kable()
max(dat$`Blood_EOS %`, na.rm = TRUE)
fisher.test(dat$severity2, dat$ICS)
setwd("~/GitHub/micRoclean_development")
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat$Batch
group = dat$Groups
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
control = group
control = control == "Negative Control"
sample = group
sample[!sample == "Negative Control"] = "Plasma"
sample[sample == "Negative Control"] = "Control"
dat = as.matrix(dat)
meta = data.frame("is_control" = control,
"sample_type" = sample,
"batch" = batch)
rownames(meta) = rownames(dat)
### dummy technical replicates (p2s3)
technical_replicates = data.frame("Batch1" = c("Old_trimmed_2", "Old_trimmed_86",
"Old_trimmed_85", "Old_trimmed_49",
"Old_trimmed_38", "Old_trimmed_3",
"Old_trimmed_13", "Old_trimmed_26"),
"Batch2" = c("New_trimmed_29", "New_trimmed_35",
"New_trimmed_41", "New_trimmed_47",
"New_trimmed_53", "New_trimmed_59",
"New_trimmed_65", "New_trimmed_71"))
library(phyloseq) # object wrapper
library(SummarizedExperiment) # object wrapper
library(tidyverse)
library(plotly) # for interactive feature
library(SCRuB) # well2well, pipeline 1
library(decontam) # pipeline 2 step2
library(microDecon) # pipeline 2
library(ANCOMBC) # pipeline 2
library(ggVennDiagram) # function 3 - pipeline 2 - comparison across removed
library(shiny) # function 3
library(ANCOMBC) # pipeline 2 step1
library(irr) # pipeline 2 step3
seed = 42
# basic horiz/vert sort for now
set.seed(seed)
# plate wells
well = data.frame()
for (i in 1:8) { # rows
row = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')
for (j in 1:12) { # columns
well[i,j] = paste0(row[i], j, sep = '')
}
}
# string for well assignments
vert = unname(unlist(well)) # vertical alignment
horiz = unname(unlist(data.frame(t(well)))) # horizontal alignment
# order samples by name convention
meta = meta %>%
arrange(batch, as.numeric(str_extract(rownames(meta), "\\d+$")))
# order batches based on naming convention (number in the end of the string)
meta[order(as.numeric(sub(".*[^0-9](\\d+)$", "\\1", rownames(meta)))),]
# restart at each batch (different plates)
num_b = table(meta$batch)
sample_well = c(vert[1:num_b[1]], vert[1:num_b[2]])
meta_vert = cbind(meta, sample_well)
meta_vert = subset(meta_vert, select = c(is_control, sample_type, sample_well))
sample_well = c(horiz[1:num_b[1]], horiz[1:num_b[2]])
meta_horiz = cbind(meta, sample_well)
meta_horiz = subset(meta_horiz, select = c(is_control, sample_type, sample_well))
# order counts by name convention for SCRuB function
counts = as.data.frame(counts) %>%
add_column(meta$batch) %>%
arrange(`meta$batch`, as.numeric(str_extract(rownames(counts), "\\d+$"))) %>%
mutate(`meta$batch` = NULL)
# create SCRuB objects by batch
sc_outs_vert = list()
for(batch in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_vert)
unique(meta_vert$batch)
sample_well = c(vert[1:num_b[1]], vert[1:num_b[2]])
meta_vert = cbind(meta, sample_well)
sample_well = c(horiz[1:num_b[1]], horiz[1:num_b[2]])
meta_horiz = cbind(meta, sample_well)
# create SCRuB objects by batch
sc_outs_vert = list()
for(batch in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
# create SCRuB objects by batch
sc_outs_vert = list()
for(batch in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
counts = dat
for(batch in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
counts[batch,]
batch = 1
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
unique(meta_vert$batch)
for(batch in unique(meta_vert$batch)) {paste(batch)}
for(batch in unique(meta_vert$batch)) {print(batch)}
for(batch in sum(unique(meta_vert$batch))) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
sum(unique(meta_vert$batch))
count(unique(meta_vert$batch))
length(unique(meta_vert$batch))
for(batch in length(unique(meta_vert$batch))) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[[batch]] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
sc_outs_vert[1]
# create SCRuB objects by batch
sc_outs_vert = list()
for(batch in length(unique(meta_vert$batch))) {
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[batch] == SCRuB(counts[batch,],
meta_vert[batch,] %>%
select(is_control, sample_type, sample_well))
}
index = meta_vert %>% filter(batch == batch) %>% row.names()
sc_outs_vert[batch] == SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
b = 1
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in length(unique(meta_vert$batch))) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[batch] == SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
index = meta_vert %>% filter(dat$batch == b) %>% row.names()
index = meta_vert %>% filter(meta$batch == b) %>% row.names()
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[batch] == SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[batch] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[batch]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_vert)
unique(meta_vert$batch)
b = "New"
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[batch]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
View(sc_outs_vert)
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_vert)
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))[1]
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_vert)
sum(is.na(dat))
View(counts)
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
unique(meta_vert$batch)
b = "Old"
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
meta_vert[index,] %>%
select(is_control, sample_type, sample_well)
is.na(counts[index,])
sum(is.na(counts[index,]))
sum(!is.numeric(counts[index,]))
SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
sapply(counts[index,], class)
sum(sapply(counts[index,], class)!="numeric")
sc_outs_vert[[b]]
sc_outs_horiz = list()
for(b in unique(meta_horiz$batch)) {
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_horiz)
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
b = "New"
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
head(meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
sapply(meta_horiz[index,] %>%
select(is_control, sample_type, sample_well), class)
unique(meta_horiz$batch)
sc_outs_horiz = list()
for(b in unique(meta_horiz$batch)) {
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
}
View(sc_outs_horiz)
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
sc_outs_horiz = list()
for(b in unique(meta_horiz$batch)) {
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
}
rowSums(dat)
is.na(rowSums(dat))
sum(is.na(rowSums(dat)))
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
sc_out = list()
for(b in unique(meta$batch)) {
index = meta %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta[index,] %>%
select(is_control, sample_type))
}
sc_out = list()
for(b in unique(meta$batch)) {
index = meta %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(as.matrix(counts[index,]),
meta[index,] %>%
select(is_control, sample_type))
}
View(sc_out)
unique(meta$batch)
b = "New"
index = meta %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta[index,] %>%
select(is_control, sample_type))
sc_outs_horiz = list()
for(b in unique(meta_horiz$batch)) {
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_horiz[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
}
sc_out = list()
for(b in unique(meta$batch)) {
index = meta %>% filter(batch == b) %>% row.names()
sc_outs[[b]] = SCRuB(counts[index,],
meta[index,] %>%
select(is_control, sample_type))
}
sc_outs = list()
for(b in unique(meta$batch)) {
index = meta %>% filter(batch == b) %>% row.names()
sc_outs[[b]] = SCRuB(counts[index,],
meta[index,] %>%
select(is_control, sample_type))
}
View(sc_outs)
remove(sc_out)
index = meta_horiz %>% filter(batch == b) %>% row.names()
temp = SCRuB(counts[index,], meta[index,] %>% select(is_contrl, sample_type))
temp = SCRuB(counts[index,], meta[index,] %>% select(is_control, sample_type))
c_temp = counts[index,]
m_temp = meta[index,]
View(m_temp)
View(c_temp)
sapply(class(c_temp), c)
sapply(c_temp, class)
sum(sapply(c_temp, class)!='numeric')
rowSums(c_temp)
md = meta
df = dat
all_scrub_outputs <- list()
for( scrub_batch in unique(md$batch) ){ # looping through all batches
# specify the row names from a particular batch
batch_indices <- md %>% filter(batch==scrub_batch) %>% row.names()
## run SCRuB, store resultsin the list
all_scrub_outputs[[scrub_batch]] <- SCRuB( df[batch_indices, ],
md[batch_indices, ] %>%
select(is_control, ## I'm making assumptions about the
sample_type, ## metadata's naming structure
sample_well) ## which are probably inacurrate in your case
)
}
all_scrub_outputs <- list()
for( scrub_batch in unique(md$batch) ){ # looping through all batches
# specify the row names from a particular batch
batch_indices <- md %>% filter(batch==scrub_batch) %>% row.names()
## run SCRuB, store resultsin the list
all_scrub_outputs[[scrub_batch]] <- SCRuB( df[batch_indices, ],
md[batch_indices, ] %>%
select(all_of(is_control, ## I'm making assumptions about the
sample_type, ## metadata's naming structure
sample_well)) ## which are probably inacurrate in your case
)
}
meta[index,] %>%
select(is_control, sample_type)
