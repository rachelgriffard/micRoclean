dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
setwd("~/GitHub/micRoclean_development")
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat$Batch
group = dat$Groups
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
control = group
control = control == "Negative Control"
sample = group
sample[!sample == "Negative Control"] = "Plasma"
sample[sample == "Negative Control"] = "Control"
dat = as.matrix(dat)
meta = data.frame("is_control" = control,
"sample_type" = sample,
"batch" = batch)
rownames(meta) = rownames(dat)
### dummy technical replicates (p2s3)
technical_replicates = data.frame("Batch1" = c("Old_trimmed_2", "Old_trimmed_86",
"Old_trimmed_85", "Old_trimmed_49",
"Old_trimmed_38", "Old_trimmed_3",
"Old_trimmed_13", "Old_trimmed_26"),
"Batch2" = c("New_trimmed_29", "New_trimmed_35",
"New_trimmed_41", "New_trimmed_47",
"New_trimmed_53", "New_trimmed_59",
"New_trimmed_65", "New_trimmed_71"))
# Function development for microbiome decontamination pipeline (micRoclean)
# 20240305
# Rachel Griffard
# Required libraries
library(phyloseq) # object wrapper
library(SummarizedExperiment) # object wrapper
library(tidyverse)
library(plotly) # for interactive feature
library(SCRuB) # well2well, pipeline 1
library(decontam) # pipeline 2 step2
library(microDecon) # pipeline 2
library(ANCOMBC) # pipeline 2
library(ggVennDiagram) # function 3 - pipeline 2 - comparison across removed
library(shiny) # function 3
library(ANCOMBC) # pipeline 2 step1
library(irr) # pipeline 2 step3
seed = 42
counts = dat
# basic horiz/vert sort for now
set.seed(seed)
# plate wells
well = data.frame()
for (i in 1:8) { # rows
row = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')
for (j in 1:12) { # columns
well[i,j] = paste0(row[i], j, sep = '')
}
}
# string for well assignments
vert = unname(unlist(well)) # vertical alignment
horiz = unname(unlist(data.frame(t(well)))) # horizontal alignment
# order samples by name convention
meta = meta %>%
arrange(batch, as.numeric(str_extract(rownames(meta), "\\d+$")))
# order batches based on naming convention (number in the end of the string)
meta[order(as.numeric(sub(".*[^0-9](\\d+)$", "\\1", rownames(meta)))),]
# restart at each batch (different plates)
num_b = table(meta$batch)
sample_well = c(vert[1:num_b[1]], vert[1:num_b[2]])
meta_vert = cbind(meta, sample_well)
sample_well = c(horiz[1:num_b[1]], horiz[1:num_b[2]])
meta_horiz = cbind(meta, sample_well)
# order counts by name convention for SCRuB function
counts = as.data.frame(counts) %>%
add_column(meta$batch) %>%
arrange(`meta$batch`, as.numeric(str_extract(rownames(counts), "\\d+$"))) %>%
mutate(`meta$batch` = NULL)
# create SCRuB objects by batch
sc_outs_vert = list()
for(b in unique(meta_vert$batch)) {
index = meta_vert %>% filter(batch == b) %>% row.names()
sc_outs_vert[[b]] = SCRuB(counts[index,],
meta_vert[index,] %>%
select(is_control, sample_type, sample_well))
}
b = "Old"
index = meta_horiz %>% filter(batch == b) %>% row.names()
sc_outs_horiz[[b]] = SCRuB(counts[index,],
meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
View(meta_horiz[index,] %>%
select(is_control, sample_type, sample_well))
View(counts[index,])
c = counts[index,]
m = meta_horiz[index,] %>%
select(is_control, sample_type, sample_well)
temp = SCRuB(c,m)
