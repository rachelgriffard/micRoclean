dat = read.csv("Level6_datus.csv", header=T,row.name=1)
setwd("~/GitHub/micRoclean_development")
dat = read.csv("Level6_datus.csv", header=T,row.name=1)
getwd()
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
wrap_phyloseq = function(counts, meta) {
OTU = otu_table(as.matrix(counts), taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
control = group
gen = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = gen$Batch
group = gen$Groups
age = gen$Age
race = gen$Race
gen = gen[,1:(ncol(gen)-5)] # remove non-count cols
control = group
control = control == "Negative Control"
sample = group
sample[!sample == "Control"] = "Plasma"
dat = as.matrix(dat)
meta = data.frame("is_control" = control,
"sample" = sample)
rownames(meta) = rownames(dat)
View(meta)
wrap_phyloseq = function(counts, meta) {
OTU = otu_table(as.matrix(counts), taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
wrap_phyloseq(dat, meta)
library(phyloseq) # object wrapper
install.packages('phyloseq')
BiocManager::install("phyloseq")
library(phyloseq) # object wrapper
library(SummarizedExperiment) # object wrapper
library(tidyverse)
library(plotly) # for interactive feature
library(SCRuB) # pipeline 1
install.packages( c('glmnet', 'torch', 'tidyverse') )
devtools::install_github("shenhav-and-korem-labs/SCRuB")
wrap_phyloseq(dat, meta)
library(phyloseq)
BiocManager::install("phyloseq")
library(phyloseq)
wrap_phyloseq(dat, meta)
View(dat)
View(meta)
wrap_phyloseq = function(counts, meta) {
OTU = otu_table(t(counts), taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
wrap_phyloseq(dat, meta)\
wrap_phyloseq(dat, meta)
counts = t(dat)
View(counts)
OTU = otu_table(t(counts), taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
ph = phyloseq(OTU, META, TAX)
View(tax_mat)
View(OTU)
View(gen)
View(counts)
OTU = otu_table(counts, taxa_are_rows = TRUE)
ph = phyloseq(OTU, META, TAX)
View(ph)
wrap_phyloseq = function(counts, meta) {
OTU = otu_table(t(counts), taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
wrap_phyloseq(dat, meta)
wrap_phyloseq = function(counts, meta) {
counts = t(counts)
OTU = otu_table(counts, taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
wrap_phyloseq(dat, meta)
View(ph)
ph$otu_table
ph@otu_table
dat2 = t(ph@otu_table)
View(dat)
dat2 = as.matrix(t(ph@otu_table))
dat2 = as.matrix(t(ph@otu_table))
class(dat2)
dat2 = matrix(t(ph@otu_table))
View(dat2)
dat2 = t(ph@otu_table)
dat2 = matrix(dat2)
dat2 = t(ph@otu_table)
dat2 = as.matrix(dat2)
class(dat2)
dat2 = data.frame(dat2)
class(dat2)
View(ph)
ph@sam_data
meta2 = data.frame(ph@sam_data)
View(meta2)
unwrap_phyloseq = function(phyloseq) {
counts = data.frame(t(phyloseq@otu_table))
meta = data.frame(phyloseq@sam_data)
return(list(counts = counts,
meta = meta))
}
ret = unwrap_phyloseq(ph)
View(ret)
View(dat)
unwrap_phyloseq = function(phyloseq) {
counts = data.frame(t(phyloseq@otu_table))
meta = data.frame(phyloseq@sam_data)
return(list(counts = matrix(counts),
meta = matrix(meta)))
}
ret = unwrap_phyloseq(ph)
View(ret)
ret$counts
unwrap_phyloseq = function(phyloseq) {
counts = data.frame(t(phyloseq@otu_table))
meta = data.frame(phyloseq@sam_data)
return(list(counts = as.matrix(counts),
meta = as.matrix(meta)))
}
ret = unwrap_phyloseq(ph)
View(ret)
ret$counts
class(ret$counts)
counts = dat
micro = wrap_phyloseq(counts, meta)
micro_s1 = ancombc(phyloseq = micro, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
BiocManager::install("ANCOMBC")
library(ANCOMBC) # pipeline 2 step2
micro_s1 = ancombc(phyloseq = micro, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
View(meta2)
### dummy data for development
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat2$Batch
group = dat$Groups
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
### dummy data for development
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat$Batch
group = dat$Groups
dat$Batch
batch = dat$Batch
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
meta = data.frame("is_control" = control,
"sample" = sample,
"batch" = batch)
rownames(meta) = rownames(dat)
micro = wrap_phyloseq(counts, meta)
micro_s1 = ancombc(phyloseq = micro, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
View(micro_s1)
micro_s1$res
View(micro_s1$res)
View(unlist(micro_s1$res))
micro_s1$res$diff_abn
micro_s1_res = do.call(cbind, micro_s1$res)
View(micro_s1_res)
micro_s1_res[ncol(micro_s1_res)-2==TRUE,]
ncol(micro_s1_res)-2
micro_s1_res[(ncol(micro_s1_res))-2==TRUE,] # check this / add eval statement to determine if still true
n_distinct(meta$batch)
library(dplyr)
micro_s1_res[ncol(micro_s1_res)-dplyr::n_distinct(meta$batch)==TRUE,] # check this / add eval statement to determine if still true
dplyr::n_distinct(meta$batch)
col = ncol(micro_s1_res)-dplyr::n_distinct(meta$batch)
micro_s1_res[col==TRUE,] # check this / add eval statement to determine if still true
micro_s1_res[col,]
micro_s1_res[,col==TRUE] # check this / add eval statement to determine if still true
micro_s1_res[,col] # check this / add eval statement to determine if still true
col = ncol(micro_s1_res)-(dplyr::n_distinct(meta$batch-1))
micro_s1_res[,col==TRUE] # check this / add eval statement to determine if still true
micro_s1_res[,col]
dplyr::n_distinct(meta$batch-1
)
(dplyr::n_distinct(meta$batch-1)
)
(dplyr::n_distinct(meta$batch-1))
(dplyr::n_distinct(meta$batch)-1)
col = ncol(micro_s1_res)-(dplyr::n_distinct(meta$batch)-1)
micro_s1_res[,col==TRUE] # check this / add eval statement to determine if still true
micro_s1_res[,col]
micro_s1_res[,col==TRUE]
which(micro_s1_res[,col]==TRUE)
col = ncol(micro_s1_res)
ind = inwhich(micro_s1_res[,col]==TRUE)
s1_rem = rownames(micro_s1_res[ind,])
col = ncol(micro_s1_res)
ind = inwhich(micro_s1_res[,col]==TRUE)
col = ncol(micro_s1_res)
ind = inwhich(micro_s1_res[,col]==TRUE)
ind = which(micro_s1_res[,col]==TRUE)
s1_rem = rownames(micro_s1_res[ind,])
s1_rem = (micro_s1_res[ind,1])
index3 = grep(paste(s1_rem,collapse="$|"), colnames(counts))
s1_rem
index3
rownames(counts[,index3])
step1 = function(counts, meta) {
micro = wrap_phyloseq(counts, meta)
# run differential analysis
micro_s1 = ancombc(phyloseq = micro, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
# create results matrix
micro_s1_res = do.call(cbind, micro_s1$res)
# identify column for diff results
col = ncol(micro_s1_res)
# return indices for which differentially abundant across batches
ind = which(micro_s1_res[,col]==TRUE)
# identify names of features tagged as contaminants
s1_res = (micro_s1_res[ind,1])
# return list of tagged contaminant features
return(s1_res)
}
s1_res = step1(dat, meta)
ind = which(s1_res[1,col]==TRUE)
phyloseq = wrap_phyloseq(counts, meta)
# run differential analysis
s1 = ancombc(phyloseq = phyloseq, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
# create results matrix
s1_res = do.call(cbind, s1$res)
# identify column for diff results
col = ncol(s1_res)
# return indices for which differentially abundant across batches
ind = which(s1_res[,col]==TRUE)
source("~/GitHub/micRoclean_development/functions_draft1.R", echo=TRUE)
# return indices for which differentially abundant across batches
ind = which(s1_res[1,col]==TRUE)
# return indices for which differentially abundant across batches
ind = which(s1_res[,col]==TRUE)
# identify names of features tagged as contaminants
s1_contam = (s1_res[ind,1])
step1 = function(counts, meta) {
phyloseq = wrap_phyloseq(counts, meta)
# run differential analysis
s1 = ancombc(phyloseq = phyloseq, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
# create results matrix
s1_res = do.call(cbind, s1$res)
# identify column for diff results
col = ncol(s1_res)
# return indices for which differentially abundant across batches
ind = which(s1_res[,col]==TRUE)
# return list of tagged contaminant features
return((s1_res[ind,1]))
}
step1(dat,meta)
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is.neg", threshold=threshold)
library(decontam) # pipeline 2 step2
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is.neg", threshold=threshold)
View(meta)
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is.control", threshold=threshold)
# create phyloseq object
phyloseq =  wrap_phyloseq(counts, meta)
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is.control", threshold=threshold)
View(meta)
class(meta$is_control)
View(META)
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is_control", threshold=threshold)
threshold = 0.5
decontam_output = isContaminant(phyloseq, method="prevalence", neg="is_control", threshold=threshold)
which(decontam_output$contaminant)
View(decontam_output)
# run decontam prevalence method
s2_res = isContaminant(phyloseq, method="prevalence", neg="is_control", threshold=threshold)
# return indices for which features identified as contaminant by decontam prevalence method
ind = which(s2_res$contaminant)
# return list of tagged contaminant features
return(rownames(s2_res[ind,]))
step2 = function(counts, meta, threshold = 0.5) {
# subset to only batches that contain negative controls
# create phyloseq object
phyloseq =  wrap_phyloseq(counts, meta)
# run decontam prevalence method
s2_res = isContaminant(phyloseq, method="prevalence", neg="is_control", threshold=threshold)
# return indices for which features identified as contaminant by decontam prevalence method
ind = which(s2_res$contaminant)
# return list of tagged contaminant features
return(rownames(s2_res[ind,]))
}
step2(dat, meta)
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat$Batch
group = dat$Groups
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
control = group
control = control == "Negative Control"
sample = group
sample[!sample == "Control"] = "Plasma"
dat = as.matrix(dat)
meta = data.frame("is_control" = control,
"sample" = sample,
"batch" = batch)
rownames(meta) = rownames(dat)
remove(comp)
remove(batch)
remove(c(control,group, index, index2, sample))
remove(c("control","group", "index", "index2", "sample"))
remove(contrl)
remove(control)
remove(group)
remove(index)
remove(index2)
remove(sample)
step1 = function(counts, meta) {
phyloseq = wrap_phyloseq(counts, meta)
# run differential analysis
s1 = ancombc(phyloseq = phyloseq, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
# create results matrix
s1_res = do.call(cbind, s1$res)
# identify column for diff results
col = ncol(s1_res)
# return indices for which differentially abundant across batches
ind = which(s1_res[,col]==TRUE)
# return list of tagged contaminant features
return(s1_res[ind,1])
}
step2 = function(counts, meta, threshold = 0.5) {
# subset to only batches that contain negative controls
# create phyloseq object
phyloseq =  wrap_phyloseq(counts, meta)
# run decontam prevalence method
s2_res = isContaminant(phyloseq, method="prevalence", neg="is_control", threshold=threshold)
# return indices for which features identified as contaminant by decontam prevalence method
ind = which(s2_res$contaminant)
# return list of tagged contaminant features
return(rownames(s2_res[ind,]))
}
counts = dat
s1_res = step1(counts, meta)
wrap_phyloseq = function(counts, meta) {
counts = t(counts) # transpose to fit with expectation of phyloseq object
OTU = otu_table(counts, taxa_are_rows = TRUE)
META = sample_data(meta)
tax_mat = matrix(rownames(counts),nrow=nrow(counts),ncol=1)
rownames(tax_mat) = rownames(counts)
TAX = tax_table(tax_mat)
return(phyloseq(OTU, META, TAX))
}
step1 = function(counts, meta) {
phyloseq = wrap_phyloseq(counts, meta)
# run differential analysis
s1 = ancombc(phyloseq = phyloseq, assay_name = "counts",
group = "batch", p_adj_method = "BH",  lib_cut = 0,
formula = "batch",
struc_zero = TRUE, neg_lb = FALSE,
tol = 1e-5, max_iter = 100, conserve = FALSE,
alpha = 0.05, global = TRUE)
# create results matrix
s1_res = do.call(cbind, s1$res)
# identify column for diff results
col = ncol(s1_res)
# return indices for which differentially abundant across batches
ind = which(s1_res[,col]==TRUE)
# return list of tagged contaminant features
return(s1_res[ind,1])
}
View(step1)
s1_res = step1(counts, meta)
s2_res = step2(counts, meta, step2_threshold)
step2_threshold = 0.5
s2_res = step2(counts, meta, step2_threshold)
class(s1_res)
install.packages('kappa')
### dummy technical replicates (p2s3)
rs = data.frame("Batch1" = c("Old_trimmed_2", "Old_trimmed_86",
"Old_trimmed_85", "Old_trimmed_49",
"Old_trimmed_38", "Old_trimmed_3",
"Old_trimmed_13", "Old_trimmed_26"),
"Batch2" = c("New_trimmed_29", "New_trimmed_35",
"New_trimmed_41", "New_trimmed_47",
"New_trimmed_53", "New_trimmed_59",
"New_trimmed_65", "New_trimmed_71"))
View(rs)
# wrap dataframes for technical replicates
for (i in 1:dplyr::n_unique(meta$batch))
)
1:dplyr::n_unique(meta$batch)
1:dplyr::n_distinct(meta$batch)
source("~/GitHub/micRoclean_development/functions_draft1.R")
View(counts)
blocklist = s1_res
step4 = function(counts, meta, blocklist) {
allTaxa = colnames(counts)
return(allTaxa[(allTaxa %in% blocklist)])
}
s4_res = step4(counts, meta, blocklist)
View(counts)
