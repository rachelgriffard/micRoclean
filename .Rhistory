p1a = df %>% ggplot(aes(`IgE (kU/L)`, hsa.miR.610)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('')  +
geom_text(data=p1a_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p1b = df %>% ggplot(aes(preFEV1_Quanpct_pred, hsa.miR.610)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p1b_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p1c =  df %>% ggplot(aes(as.numeric(`WG_derived_num_exacacerbations (12 mo.)`), hsa.miR.610)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p1c_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p1d =  df %>% ggplot(aes(round(preFEV1FVC_Quanpct_pred), hsa.miR.610)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p1d_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
# hsa.miR.330.3p
p2a =  df %>% ggplot(aes(`IgE (kU/L)`, hsa.miR.330.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p2a_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p2b =  df %>% ggplot(aes(preFEV1_Quanpct_pred, hsa.miR.330.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p2b_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p2c =  df %>% ggplot(aes(as.numeric(`WG_derived_num_exacacerbations (12 mo.)`), hsa.miR.330.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p2c_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p2d =  df %>% ggplot(aes(preFEV1FVC_Quanpct_pred, hsa.miR.330.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p2d_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
# hsa.miR.515.3p
p3a = df %>% ggplot(aes(`IgE (kU/L)`, hsa.miR.515.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p3a_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p3b = df %>% ggplot(aes(preFVC_Quanpct_pred, hsa.miR.515.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p3b_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p3c =  df %>% ggplot(aes(as.numeric(`WG_derived_num_exacacerbations (12 mo.)`), hsa.miR.515.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p3c_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
p3d = df %>% ggplot(aes(preFEV1FVC_Quanpct_pred, hsa.miR.515.3p)) +
geom_smooth(method = 'lm', color = 'gray25', alpha = 0.5, size = .5) +
geom_point() +
theme_classic() +
xlab('') + ylab('') +
geom_text(data=p3d_a,aes(x = xpos,
y = ypos,
hjust = hjustvar,
vjust = vjustvar,
label = annotateText),
size = 3)
plot_grid(
p1a, p1b, p1c, p1d,
p2a, p2b, p2c, p2d,
p3a, p3b, p3c, p3d,
ncol = 4,
labels = 'AUTO'
)
knitr::opts_chunk$set(echo = FALSE,
dev = "png",
dpi = 150,
cache = TRUE,
warning = FALSE)
# load libraries
library(tidyverse)
library(knitr)
library(plotly)
library(corrplot)
library(kableExtra)
library(cowplot)
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_bEOS = signif(mean(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
sd_bEOS = signif(sd(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
med_bEOS = signif(median(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
min_bEOS = signif(min(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
max_bEOS = signif(max(as.integer(`Blood_EOS %`, na.rm = TRUE)),3))
signif(mean(as.integer(`Blood_EOS %`, na.rm = TRUE)),3)
signif(mean(as.integer(dat$`Blood_EOS %`, na.rm = TRUE)),3)
# append subject name to covariate data (dat)
dat = merge(dat, meta[,1:2], by = 'unique_id')
dat %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# select miRNA DE for this comparison
miRNA = de[,1]
# subset counts dataframe to DE miRNA and subjects of HC and NS group
df = counts_t %>%
select(any_of(miRNA)) %>% # select only DE miRNAs
rownames_to_column('sample_number') %>% # for full join
full_join(dat, by = 'sample_number') %>% # combine covariate and expression of miRNA
select(!c(unique_id, source, studies_other, dob, baseline_age_v2, gender, race, hispanic, `height (cm)`,
`weight (Kg)`, BMI, severity, feno_log, rc_exac_option1, OCS, severity2, ICS)) %>% # remove unnecessary cols
column_to_rownames('sample_number')
# transpose counts matrix to match covariate and meta
counts_t = data.frame(t(counts))
counts_t %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# select miRNA DE for this comparison
miRNA = de[,1]
# subset counts dataframe to DE miRNA and subjects of HC and NS group
df = counts_t %>%
select(any_of(miRNA)) %>% # select only DE miRNAs
rownames_to_column('sample_number') %>% # for full join
full_join(dat, by = 'sample_number') %>% # combine covariate and expression of miRNA
select(!c(unique_id, source, studies_other, dob, baseline_age_v2, gender, race, hispanic, `height (cm)`,
`weight (Kg)`, BMI, severity, feno_log, rc_exac_option1, OCS, severity2, ICS)) %>% # remove unnecessary cols
column_to_rownames('sample_number')
# import covariate data
dat = readxl::read_excel('clinicaldata.xlsx')
dat %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# import DE data
de = read.csv('DEmiRNA.csv')
de %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
de[,1] = data.frame(sapply(de[,1], function(x) {
gsub('-', '.', x)
}))
# import NORMALIZED count matrix for miRNAs
counts = read.csv('miRNA_count_human.csv')
counts = column_to_rownames(counts, var = 'X')
counts %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# import metadata on subjects
meta = read.csv('meta_human.csv')
colnames(meta) = c('unique_id', 'sample_number', 'clinical_status')
meta$unique_id = trimws(meta$unique_id) # remove spaces to ensure similarity
meta$clinical_status = trimws(meta$clinical_status)
meta %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# transpose counts matrix to match covariate and meta
counts_t = data.frame(t(counts))
counts_t %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# append subject name to covariate data (dat)
dat = merge(dat, meta[,1:2], by = 'unique_id')
dat %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
# select miRNA DE for this comparison
miRNA = de[,1]
# subset counts dataframe to DE miRNA and subjects of HC and NS group
df = counts_t %>%
select(any_of(miRNA)) %>% # select only DE miRNAs
rownames_to_column('sample_number') %>% # for full join
full_join(dat, by = 'sample_number') %>% # combine covariate and expression of miRNA
select(!c(unique_id, source, studies_other, dob, baseline_age_v2, gender, race, hispanic, `height (cm)`,
`weight (Kg)`, BMI, severity, feno_log, rc_exac_option1, OCS, severity2, ICS)) %>% # remove unnecessary cols
column_to_rownames('sample_number')
df %>% kable() %>%
kable_styling("striped", full_width = T) %>%
scroll_box(width = '100%', height = "300px")
M = cor(sapply(df, as.numeric), use = 'pairwise.complete.obs', method = 'spearman')
p = ggcorrplot::ggcorrplot(M, outline.color = 'white', ggtheme = ggplot2::theme_bw,
colors = c("#4dbd05", "white", "#9b45a3"),
legend.title = 'Spearman correlation',
title = 'Spearman correlation',
tl.cex = 7) +
geom_rect(aes(xmin=22.5, xmax=32.5, ymin=0.5, ymax=22.5), color = 'black', fill = NA, linetype = 'dashed', linewidth = 0.6)
ggplotly(p)
write.csv(M, '240607_Sundar_miRNA_files/spearman_correlation.csv')
ggsave('240607_Sundar_miRNA_files/figure-html/corplot.png', p, width = 8, height = 6, dpi = 'print')
ggplotly(p)
# Kruskal-Wallis
k_FEV = kruskal.test(preFEV1_Quanpct_pred ~ severity2, dat)
k_FEV
library(rstatix)
install.packages('rstatix')
library(rstatix)
dunn_test(dat, preFEV1_Quanpct_pred ~ severity2)
dunn_test(dat, preFEV1_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_FEV1FVC = kruskal.test(preFEV1FVC_Quanpct_pred ~ severity2, dat)
k_FEV1FVC
dunn_test(dat, preFEV1FVC_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_FVC = kruskal.test(preFVC_Quanpct_pred ~ severity2, dat)
k_FVC
dunn_test(dat, preFVC_Quanpct_pred ~ severity2) %>% kable()
# Kruskal-Wallis
k_IGE = kruskal.test(`IgE (kU/L)` ~ severity2, dat)
k_IGE
dunn_test(dat, `IgE (kU/L)` ~ severity2) %>% kable()
# Kruskal-Wallis
k_bEOS = kruskal.test(as.integer(`Blood_EOS %`) ~ severity2, dat)
k_bEOS
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
dunn_test(dat, as.integer(`Blood_EOS %`) ~ severity2) %>% kable()
dat$`Blood_EOS %` = as.integer(dat$`Blood_EOS %`)
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
# Kruskal-Wallis
k_sEOS = kruskal.test(as.integer(`sputum_EOS %`) ~ severity2, dat)
k_sEOS
dat$`sputum_EOS %` = as.integer(`sputum_EOS %`)
dat$`sputum_EOS %` = as.integer(dat$`sputum_EOS %`)
dunn_test(dat, `IgE (kU/L)` ~ severity2) %>% kable()
dunn_test(dat, `sputum_EOS %` ~ severity2) %>% kable()
# ANOVA
# Kruskal-Wallis
k_FENO = kruskal.test(as.integer(`FeNO (ppb)`) ~ severity2, dat)
k_FENO
# Kruskal-Wallis
k_FENOlog = kruskal.test(as.integer(feno_log) ~ severity2, dat)
k_FENOlog
# Kruskal-Wallis
k_exac = kruskal.test(as.integer(`WG_derived_num_exacacerbations (12 mo.)`) ~ severity2, dat)
k_exac
# Kruskal-Wallis
k_act = kruskal.test(as.integer(act_score) ~ severity2, dat)
k_act
# Kruskal-Wallis
k_NC = kruskal.test(as.integer(num_controllers) ~ severity2, dat)
k_NC
dat$num_controllers = as.integer(dat$num_controllers)
dunn_test(dat, num_controllers ~ severity2) %>% kable()
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_bEOS = signif(mean(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
sd_bEOS = signif(sd(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
med_bEOS = signif(median(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
min_bEOS = signif(min(as.integer(`Blood_EOS %`, na.rm = TRUE)),3),
max_bEOS = signif(max(as.integer(`Blood_EOS %`, na.rm = TRUE)),3)) %>%
kable()
# boxplot
p=ggplot(dat, aes(severity2, as.integer(`Blood_EOS %`))) +
geom_boxplot() +
ggtitle('Blood Eos %') +
xlab('Severity') + ylab('Blood EoS%') +
theme_bw()
ggplotly(p)
ggsave('240607_Sundar_miRNA_files/figure-html/bEOS_boxplot.png', p, width = 8, height = 6, dpi = 'print')
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`),3),
sd_sEOS = signif(sd(`Blood_EOS %`),3),
med_sEOS = signif(median(`Blood_EOS %`),3),
min_sEOS = signif(min(`Blood_EOS %`),3),
max_sEOS = signif(max(`Blood_EOS %`),3)) %>%
kable()
dat %>%
group_by(severity2)
View(dat)
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_sEOS = signif(sd(`Blood_EOS %`),3),
med_sEOS = signif(median(`Blood_EOS %`),3),
min_sEOS = signif(min(`Blood_EOS %`),3),
max_sEOS = signif(max(`Blood_EOS %`),3)) %>%
kable()
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_sEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_sEOS = signif(sd(`Blood_EOS %`, na.rm = TRUE),3),
med_sEOS = signif(median(`Blood_EOS %`, na.rm = TRUE),3),
min_sEOS = signif(min(`Blood_EOS %`, na.rm = TRUE),3),
max_sEOS = signif(max(`Blood_EOS %`, na.rm = TRUE),3)) %>%
kable()
dat$`Blood_EOS %` = as.integer(dat$`Blood_EOS %`)
# summary
dat %>%
group_by(severity2) %>%
summarize(n = n(),
mean_bEOS = signif(mean(`Blood_EOS %`, na.rm = TRUE),3),
sd_bEOS = signif(sd(`Blood_EOS %`, na.rm = TRUE),3),
med_bEOS = signif(median(`Blood_EOS %`, na.rm = TRUE),3),
min_bEOS = signif(min(`Blood_EOS %`, na.rm = TRUE),3),
max_bEOS = signif(max(`Blood_EOS %`, na.rm = TRUE),3)) %>%
kable()
dunn_test(dat, `Blood_EOS %` ~ severity2) %>% kable()
dunn_test(dat, `Blood_EOS %` ~ severity2)[,2:7] %>% kable()
max(dat$`Blood_EOS %`, na.rm = TRUE)
fisher.test(dat$severity2, dat$ICS)
setwd("~/GitHub/micRoclean_development")
### dummy data for development
dat = read.csv("Level6_Genus.csv", header=T,row.name=1)
batch = dat$Batch
group = dat$Groups
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
comp = data.frame(colnames(dat))
comp$compare = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(comp$compare=="")
comp = comp[-index2,]
index = grep(".*.g__*", colnames(dat)) # keep if have IDed datus
dat = dat[,index]
colnames(dat) = sub(".*.g__", "", colnames(dat)) # subset to only datus
index2 = which(names(dat)=="")
dat = dat[,-index2] # remove if no value
removed = sample(colnames(dat), 100)
### dummy meta data
control = group
control = control == "Negative Control"
sample = group
sample[!sample == "Negative Control"] = "Plasma"
sample[sample == "Negative Control"] = "Control"
dat = as.matrix(dat)
meta = data.frame("is_control" = control,
"sample_type" = sample,
"batch" = batch)
rownames(meta) = rownames(dat)
### dummy technical replicates (p2s3)
technical_replicates = data.frame("Batch1" = c("Old_trimmed_2", "Old_trimmed_86",
"Old_trimmed_85", "Old_trimmed_49",
"Old_trimmed_38", "Old_trimmed_3",
"Old_trimmed_13", "Old_trimmed_26"),
"Batch2" = c("New_trimmed_29", "New_trimmed_35",
"New_trimmed_41", "New_trimmed_47",
"New_trimmed_53", "New_trimmed_59",
"New_trimmed_65", "New_trimmed_71"))
# plate wells
well = data.frame()
for (i in 1:8) { # rows
row = c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')
for (j in 1:12) { # columns
well[i,j] = paste0(row[i], j, sep = '')
}
}
# string for well assignments
vert = unname(unlist(well)) # vertical alignment
horiz = unname(unlist(data.frame(t(well)))) # horizontal alignment
# order samples by name convention
meta = meta %>%
arrange(batch, as.numeric(str_extract(rownames(meta), "\\d+$")))
# order batches based on naming convention (number in the end of the string)
meta[order(as.numeric(sub(".*[^0-9](\\d+)$", "\\1", rownames(meta)))),]
# restart at each batch (different plates)
num_b = table(meta$batch)
sample_well = c(vert[1:num_b[1]], vert[1:num_b[2]])
meta_vert = cbind(meta, sample_well)
meta_vert = subset(meta_vert, select = c(is_control, sample_type, sample_well))
sample_well = c(horiz[1:num_b[1]], horiz[1:num_b[2]])
meta_horiz = cbind(meta, sample_well)
meta_horiz = subset(meta_horiz, select = c(is_control, sample_type, sample_well))
# order counts by name convention for SCRuB function
counts = as.data.frame(counts) %>%
add_column(meta$batch) %>%
arrange(`meta$batch`, as.numeric(str_extract(rownames(counts), "\\d+$"))) %>%
mutate(`meta$batch` = NULL)
# create SCRuB objects
SCRuB_vert = SCRuB::SCRuB(counts,
meta_vert)
SCRuB_horiz = SCRuB::SCRuB(counts,
meta_horiz)
counts = dat
is.na(dat)
sum(is.na(dat))
# determine if vert/horiz significantly different from without spatial
psych::mat.cortest(SCRuB, SCRuB_vert)
# determine if vert/horiz significantly different from without spatial
psych::cortest.mat(SCRuB, SCRuB_vert)
counts = dat
scr_out = SCRuB::SCRuB(counts,
metadata = meta %>% select(tidyselect::any_of(c('is_control', 'sample_type', 'sample_well'))),
control_order = control_order)
library(tidyverse)
scr_out = SCRuB::SCRuB(counts,
metadata = meta %>% select(tidyselect::any_of(c('is_control', 'sample_type', 'sample_well'))),
control_order = control_order)
pipeline1 = function(counts, meta, control_order = NA, seed = 42) {
set.seed(seed)
# SCRuB
scr_out = SCRuB::SCRuB(counts,
metadata = meta %>% select(tidyselect::any_of(c('is_control', 'sample_type', 'sample_well'))),
control_order = control_order)
sc_counts = data.frame(scr_out$decontaminated_samples)
sc_FL = FL(counts, new_counts = sc_counts)
# extract FL values from SCRuB data
# Create deliverable
return(list('decontaminated_count' = sc_counts,
'filtering_loss' = sc_FL,
'pipeline' = 'pipeline1')
)
}
pipeline1(dat, meta)
FL = function(counts, new_counts = NULL, removed = NULL){
# for pipeline 1
if (is.null(new_counts) == FALSE) { #pipeline 1
X_R = new_counts
}
# for pipeline 2
if (is.null(removed) == FALSE) {
# Check the format of removed vector
if(class(removed) != "character")
stop('removed argument must be a character vector containing names of taxa to be removed')
Ind = which(colnames(counts) %in%  removed)
X_R = counts[,-Ind]
}
#calculate corresponding norm
Netw = t(as.matrix(counts))%*%as.matrix(counts)
Netw_R = t(as.matrix(X_R))%*%as.matrix(X_R)
FL =  1 - (sum(Netw_R*Netw_R)/sum(Netw*Netw))
return(FL)
}
sc_out = pipeline1(dat, meta)
sc_out = sc_out$decontaminated_count
psych::cortest.mat(dat, sc_out)
psych::cortest(dat, sc_out)
# determine if vert/horiz significantly different from without spatial
vegan::mantel(dat, sc_out)
dim(dat)
dim(sc_out)
# determine if vert/horiz significantly different from without spatial
vegan::mantel(vegan::vegdist(dat), vegan::vegdist(sc_out))
vegan::vegdist(dat)
temp = vegan::vegdist(dat)
View(temp)
View(as.matrix(temp))
dim(sc_out)
setdiff(colnames(sc_out), colnames(dat))
dim(dat)
setdiff(colnames(dat), colnames(sc_out))
colnames(dat)
